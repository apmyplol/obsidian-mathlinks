/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianMath
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ObsidianMath = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.postprocessor = (el, ctx) => {
      var mathElements = el.getElementsByClassName("math is-loaded");
      for (var i = 0; i < mathElements.length; i++) {
        mathElements[i].querySelectorAll("a").forEach((link) => link.addClass("internal-link"));
      }
    };
  }
  async onload() {
    console.log("loading mathlinks");
    await (0, import_obsidian.loadMathJax)();
    this.registerMarkdownPostProcessor(this.postprocessor);
  }
  onunload() {
    console.log("unloading mathlinks");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blBvc3RQcm9jZXNzb3IsIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIGxvYWRNYXRoSmF4IH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2lkaWFuTWF0aCBleHRlbmRzIFBsdWdpbiB7XG4gICAgcHVibGljIHBvc3Rwcm9jZXNzb3I6IE1hcmtkb3duUG9zdFByb2Nlc3NvciA9IChlbDogSFRNTEVsZW1lbnQsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCkgPT4ge1xuXHRcdC8vIGdldCBhbGwgbG9hZGVkIG1hdGhqYXggZWxlbWVudHNcblx0XHR2YXIgbWF0aEVsZW1lbnRzID0gZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1hdGggaXMtbG9hZGVkXCIpO1xuXHRcdGZvcih2YXIgaT0wO2k8bWF0aEVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcblx0XHRcdC8vIGZvciBlYWNoIG1hdGhqYXggaHJlZiBlbGVtZW50IGFkZCB0aGUgY2xhc3MgXCJpbnRlcm5hbC1saW5rXCIgdG8gbWFrZSBvYnNpZGlhbiBob3ZlciBhbmQgc3R1ZmYgd29ya1xuXHRcdCAgIG1hdGhFbGVtZW50c1tpXS5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKS5mb3JFYWNoKGxpbmsgPT4gbGluay5hZGRDbGFzcyhcImludGVybmFsLWxpbmtcIikpXG5cdFx0fVxuICAgIH1cblxuICAgIGFzeW5jIG9ubG9hZCAoKSB7XG4gICAgICBjb25zb2xlLmxvZygnbG9hZGluZyBtYXRobGlua3MnKVxuXHQgIGF3YWl0IGxvYWRNYXRoSmF4KCk7XG5cdCAgdGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3Nvcih0aGlzLnBvc3Rwcm9jZXNzb3IpXG4gICAgfVxuXG4gICAgb251bmxvYWQgKCkge1xuICAgICAgY29uc29sZS5sb2coJ3VubG9hZGluZyBtYXRobGlua3MnKVxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBeUY7QUFHekYsSUFBcUIsZUFBckIsY0FBMEMsdUJBQU87QUFBQSxFQUFqRDtBQUFBO0FBQ0ksU0FBTyxnQkFBdUMsQ0FBQyxJQUFpQixRQUFzQztBQUV4RyxVQUFJLGVBQWUsR0FBRyx1QkFBdUIsZ0JBQWdCO0FBQzdELGVBQVEsSUFBRSxHQUFFLElBQUUsYUFBYSxRQUFRLEtBQUk7QUFFcEMscUJBQWEsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLEVBQUUsUUFBUSxVQUFRLEtBQUssU0FBUyxlQUFlLENBQUM7QUFBQSxNQUN2RjtBQUFBLElBQ0U7QUFBQTtBQUFBLEVBRUEsTUFBTSxTQUFVO0FBQ2QsWUFBUSxJQUFJLG1CQUFtQjtBQUNsQyxjQUFNLDZCQUFZO0FBQ2xCLFNBQUssOEJBQThCLEtBQUssYUFBYTtBQUFBLEVBQ3BEO0FBQUEsRUFFQSxXQUFZO0FBQ1YsWUFBUSxJQUFJLHFCQUFxQjtBQUFBLEVBQ25DO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
